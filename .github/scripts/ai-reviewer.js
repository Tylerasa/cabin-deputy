import Anthropic from '@anthropic-ai/sdk';
import { Octokit } from '@octokit/rest';

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
});

const octokit = new Octokit({
  auth: process.env.GITHUB_TOKEN,
});

async function getChangedFiles(prNumber) {
  const { data: files } = await octokit.rest.pulls.listFiles({
    owner: process.env.GITHUB_REPOSITORY.split('/')[0],
    repo: process.env.GITHUB_REPOSITORY.split('/')[1],
    pull_number: prNumber,
  });
  
  return files;
}

async function getDiff(prNumber) {
  try {
    // Get the diff using GitHub API
    const { data } = await octokit.rest.pulls.get({
      owner: process.env.GITHUB_REPOSITORY.split('/')[0],
      repo: process.env.GITHUB_REPOSITORY.split('/')[1],
      pull_number: prNumber,
      mediaType: {
        format: 'diff'
      }
    });
    
    return data;
  } catch (error) {
    console.error('Error getting diff:', error);
    return '';
  }
}

async function reviewWithClaude(diff, files) {
  const filesList = files.map(f => `- ${f.filename} (${f.status})`).join('\n');
  
  const prompt = `You are an expert TypeScript/Next.js code reviewer specializing in React applications. Please review this Pull Request and provide constructive feedback.

**Files Changed:**
${filesList}

**Diff:**
\`\`\`diff
${diff}
\`\`\`

Please provide a thorough code review focusing on:

## 🔒 Security
- Authentication/authorization issues
- Input validation and sanitization
- SQL injection or XSS vulnerabilities
- Exposed secrets or sensitive data
- CORS and API security

## ⚡ Performance
- Database query optimization
- Bundle size impact
- React rendering performance
- Memory leaks or inefficient algorithms
- Image optimization and loading

## 🏗️ Code Quality
- TypeScript best practices
- React hooks usage
- Component design patterns
- Error handling and edge cases
- Code readability and maintainability

## 🛡️ Type Safety
- Proper TypeScript typing
- Any types that should be more specific
- Missing null/undefined checks
- Type assertion usage

## 🧪 Testing
- Missing test coverage
- Test quality improvements
- Edge cases that need testing

## 📝 Documentation
- Missing JSDoc comments
- Unclear function/component purposes
- README updates needed

## 🎯 Next.js/React Specific
- Proper use of Next.js features (SSR, SSG, etc.)
- React best practices
- Accessibility considerations
- SEO implications

Format your response with clear sections and be specific about file locations and line numbers when possible. If the code looks good, mention what's done well. Be constructive and focus on actionable feedback.`;

  try {
    const response = await anthropic.messages.create({
      model: 'claude-3-5-sonnet-20241022',
      max_tokens: 4000,
      messages: [
        {
          role: 'user',
          content: prompt
        }
      ]
    });
    
    return response.content[0].text;
  } catch (error) {
    console.error('Error calling Claude:', error);
    return 'Sorry, I encountered an error while reviewing the code. Please try again later.';
  }
}

async function postReview(prNumber, review) {
  const reviewComment = `## 🤖 AI Code Review

${review}

---
*This review was generated by Claude AI. Please use your judgment and consider this as additional input for your code review process.*

**Usage:** Comment \`@agent please review this PR\` to trigger a review.`;

  try {
    await octokit.rest.issues.createComment({
      owner: process.env.GITHUB_REPOSITORY.split('/')[0],
      repo: process.env.GITHUB_REPOSITORY.split('/')[1],
      issue_number: prNumber,
      body: reviewComment,
    });
    
    console.log('Review posted successfully!');
  } catch (error) {
    console.error('Error posting review:', error);
  }
}

async function main() {
  const prNumber = parseInt(process.env.PR_NUMBER);
  
  if (!prNumber) {
    console.error('PR number not found');
    process.exit(1);
  }
  
  console.log(`Starting AI review for PR #${prNumber}`);
  
  try {
    // Get changed files and diff
    const files = await getChangedFiles(prNumber);
    const diff = await getDiff(prNumber);
    
    if (!diff || diff.trim() === '') {
      await postReview(prNumber, 'No changes detected in this PR.');
      return;
    }
    
    // Skip very large diffs to avoid token limits
    if (diff.length > 50000) {
      await postReview(prNumber, 'This PR is too large for AI review. Please consider breaking it into smaller PRs for better review quality.');
      return;
    }
    
    // Review with Claude
    console.log('Getting AI review...');
    const review = await reviewWithClaude(diff, files);
    
    // Post the review
    await postReview(prNumber, review);
    
  } catch (error) {
    console.error('Error in main process:', error);
    await postReview(prNumber, 'Sorry, I encountered an error while reviewing this PR. Please try again later.');
  }
}

main();