// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid())
  username      String   @unique
  email         String   @unique
  phone         String   @unique
  passwordHash  String
  pin           String   @db.Char(4)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  wallet        Wallet?
  OTP           OTP[]
}

model Wallet {
  id                   String        @id @default(uuid())
  userId               String        @unique
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  currencyCode         String        @default("USD")
  balance              Float         @default(0.0)
  createdAt            DateTime      @default(now())
  transactionsSent     Transaction[] @relation("SenderTransactions")
  transactionsReceived Transaction[] @relation("RecipientTransactions")
}

model Transaction {
  id                String                @id @default(uuid())
  senderWalletId    String
  recipientWalletId String
  senderWallet      Wallet                @relation("SenderTransactions", fields: [senderWalletId], references: [id])
  recipientWallet   Wallet                @relation("RecipientTransactions", fields: [recipientWalletId], references: [id])
  amount            Float
  idempotencyKey    String                @unique
  status            TransactionStatusEnum @default(PENDING)
  createdAt         DateTime              @default(now())
}

enum TransactionStatusEnum {
  PENDING
  SUCCESS
  FAILED
}

model OTP {
  id             Int      @id @default(autoincrement())
  userId         String
  phoneNumber    String
  otpCode        String   @db.VarChar(4)
  idempotencyKey String   @unique
  expiryDate     DateTime @default(dbgenerated("NOW() + interval '2 minutes'"))
  status         String   @default("pending")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}
