// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(uuid())
  name              String
  username          String          @unique
  email             String          @unique
  phone             String          @unique
  password          String
  pin               String?
  emailVerified     Boolean         @default(false)
  verificationToken String?
  createdAt         DateTime        @default(now())
  wallet            Wallet?
  OTP               PaymentIntent[]
}

model Wallet {
  id                   String          @id @default(uuid())
  userId               String          @unique
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  currencyCode         String          @default("USD")
  balance              Float           @default(0.0)
  createdAt            DateTime        @default(now())
  transactionsSent     Transaction[]   @relation("SenderTransactions")
  transactionsReceived Transaction[]   @relation("RecipientTransactions")
  paymentIntents       PaymentIntent[] @relation("SenderWallet")
  receivedPayments     PaymentIntent[] @relation("RecipientWallet")
}

model PaymentIntent {
  id                Int          @id @default(autoincrement())
  senderWalletId    String
  recipientWalletId String
  otpCode           String       @db.VarChar(4)
  idempotencyKey    String       @unique @default(nanoid())
  amount            Float
  expiryDate        DateTime     @default(dbgenerated("NOW() + interval '2 minutes'"))
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  senderWallet      Wallet       @relation("SenderWallet", fields: [senderWalletId], references: [id])
  recipientWallet   Wallet       @relation("RecipientWallet", fields: [recipientWalletId], references: [id])
  transaction       Transaction?
  User              User?        @relation(fields: [userId], references: [id])
  userId            String?
}

model Transaction {
  id                String                @id @default(uuid())
  senderWalletId    String
  recipientWalletId String
  senderWallet      Wallet                @relation("SenderTransactions", fields: [senderWalletId], references: [id])
  recipientWallet   Wallet                @relation("RecipientTransactions", fields: [recipientWalletId], references: [id])
  amount            Float
  paymentIntentId   Int?                  @unique
  paymentIntent     PaymentIntent?        @relation(fields: [paymentIntentId], references: [id])
  status            TransactionStatusEnum @default(SUCCESS)
  createdAt         DateTime              @default(now())
}

enum TransactionStatusEnum {
  SUCCESS
  FAILED
}
